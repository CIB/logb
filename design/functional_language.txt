begin axioms
	class Expression
		instanceOf [
			ConstantExpr, IfExpr, DefineExpr, CallExpr
		]
	end
	
	class ExprTreeNode
		instanceOf [ConstantExprNode, IfExprNode, DefineExprNode, CallExprNode]
	end class
	
	data ConstantExprNode
		attributes
			expr : ConstantExpr
			environment : Map[String -> ConstantExpr]
			value : ConstantExpr
			result : ConstantExpr
		end attributes
	end data
	
	data IfExprNode
		attributes
			expr : IfExpr
			environment : Map[String -> ConstantExpr]
			conditionNode : ExprTreeNode
			takenBranchNode : ExprTreeNode
			result : ConstantExpr
		end attributes
	end data
	
	data DefineExprNode
		attributes
			expr : DefineExpr
			environment : Map[String -> ConstantExpr]
			definedValue : ConstantExpr
			bodyNode : ExprTreeNode
			result : ConstantExpr
		end attributes
	end data
	
	data CallExprNode
		attributes
			expr : CallExpr
			environment : Map[String -> ConstantExpr]
			arguments : [ConstantExpr]
			body : ExprTreeNode
			result : ConstantExpr
		end attributes
	end data
	
	data ConstantExpr
		attributes
			value : Integer | String
			result : ConstantExpr
		end attributes
		
		define expand(self, env) self.value end
	end
	
	data IfExpr
		attributes
			condition  : Expression
			thenBranch : Expression
			elseBranch : Expression
		end attributes
		
		define is_valid(self, env)
			if is_valid(self.condition, env) then
				let condValue = eval(self.condition, env)
				if condValue == True then
					is_valid(self.thenBranch, env)
				elseif condValue == False
					is_valid(self.elseBranch, env)
				else
					False
				end if
			end if
		end define
		
		define expand(self, env)
			let condExprNode = condition.expand(env)
			let conditionValue = condExprNode.value
			
			if conditionValue === True then
				let takenBranchNode = thenBranch.expand(env)
			else if conditionValue === False
				let takenBranchNode = elseBranch.expand(env)
			endif
			
			return IfExprNode {
				expr = self
				environment = env
				conditionNode = condExprNode
				takenBranchNode = takenBranchNode
				result = takenBranchNode.result
			}
		end define
	end data
	
	data DefineExpr
		attributes
			variableName : String
			value : Expression
			subExpression : Expression
		end attributes
		
		define is_valid(self, env)
			is_valid(self.value, env)
			self.variableName not in keys(env)
			let newEnv = env ++ (self.variableName -> eval(self.value, env))
			is_valid(self.subExpression, newEnv)
		end define
		
		define expand(self, env)
			let value = eval(self.value, env)
			let newEnv = env ++ (self.variableName -> value)
			let bodyNode = subExpression.expand(newEnv)
			return DefineExprNode {
				expr = self
				environment = env
				definedValue = value
				bodyNode = bodyNode
				result = bodyNode.result
			}
		end define
	end
	
	data CallExpr
		attributes
			functionName : String
			arguments : [Expression]
		end attributes
	end
	
	data FunctionDefinition
		attributes
			name : String
			parameters : [String]
			body : Expression
		end attributes
	end
	
end axioms
